{
  "uid" : "70512d55b61af21c",
  "name" : "test_cancel_flat",
  "fullName" : "testCancelOrder.test_Qcancelorder.TestCancelOrder#test_cancel_flat",
  "historyId" : "cfec313189808b66275e679df792eb72",
  "time" : {
    "start" : 1652712684722,
    "stop" : 1652712696153,
    "duration" : 11431
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <testcases.testCancelOrder.test_Qcancelorder.TestCancelOrder object at 0x00C9CCF0>\nsetup_fixture = (<businessPage.cancel_order_page.CancelOrder object at 0x00C9C6B0>, <businessPage.trade_first_page.TradeFirst object a...<businessPage.choice_oder_page.ChoiceOrder object at 0x00C9C750>, <businessPage.order_page.Order object at 0x00C9C6D0>)\n\n    @pytest.mark.usefixtures('back_fixture')\n    def test_cancel_flat(self,setup_fixture):\n        cancleorder,tradehome,choiceorder,order= setup_fixture\n        # 构造1个平仓撤单数据\n>       tradehome.to_trade_page()\n\ntestCancelOrder\\test_Qcancelorder.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\businessPage\\trade_first_page.py:40: in to_trade_page\n    self.get_clickable_element(self.trade_page,\"交易\")\n..\\common\\common_fun.py:276: in get_clickable_element\n    raise e\n..\\common\\common_fun.py:270: in get_clickable_element\n    ele = WebDriverWait(self.driver,timeout,0.5).until(EC.element_to_be_clickable(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b50939d1-70ab-492b-86af-b09c9bb309f0\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x00C9CEB0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "back_fixture",
    "time" : {
      "start" : 1652712684721,
      "stop" : 1652712684721,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "login_fixture",
    "time" : {
      "start" : 1652712551663,
      "stop" : 1652712568697,
      "duration" : 17034
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "setup_fixture",
    "time" : {
      "start" : 1652712684721,
      "stop" : 1652712684721,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "driver_fixture",
    "time" : {
      "start" : 1652712517183,
      "stop" : 1652712551663,
      "duration" : 34480
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <testcases.testCancelOrder.test_Qcancelorder.TestCancelOrder object at 0x00C9CCF0>\nsetup_fixture = (<businessPage.cancel_order_page.CancelOrder object at 0x00C9C6B0>, <businessPage.trade_first_page.TradeFirst object a...<businessPage.choice_oder_page.ChoiceOrder object at 0x00C9C750>, <businessPage.order_page.Order object at 0x00C9C6D0>)\n\n    @pytest.mark.usefixtures('back_fixture')\n    def test_cancel_flat(self,setup_fixture):\n        cancleorder,tradehome,choiceorder,order= setup_fixture\n        # 构造1个平仓撤单数据\n>       tradehome.to_trade_page()\n\ntestCancelOrder\\test_Qcancelorder.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\businessPage\\trade_first_page.py:40: in to_trade_page\n    self.get_clickable_element(self.trade_page,\"交易\")\n..\\common\\common_fun.py:276: in get_clickable_element\n    raise e\n..\\common\\common_fun.py:270: in get_clickable_element\n    ele = WebDriverWait(self.driver,timeout,0.5).until(EC.element_to_be_clickable(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b50939d1-70ab-492b-86af-b09c9bb309f0\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x00C9CEB0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1f967896d8ba384e",
      "name" : "log",
      "source" : "1f967896d8ba384e.txt",
      "type" : "text/plain",
      "size" : 6920
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "back_fixture::0",
    "time" : {
      "start" : 1652712696186,
      "stop" : 1652712697836,
      "duration" : 1650
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\n\n",
    "statusTrace" : "  File \"D:\\xiaxy\\python\\lib\\site-packages\\allure_commons\\_allure.py\", line 200, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\_pytest\\fixtures.py\", line 941, in _teardown_yield_fixture\n    next(it)\n  File \"D:\\xiaxy\\automation_test2022.4.22\\testcases\\conftest.py\", line 74, in back_fixture\n    com.back()\n  File \"D:\\xiaxy\\automation_test2022.4.22\\common\\common_fun.py\", line 367, in back\n    self.get_clickable_element(self.Back,\"返回\")\n  File \"D:\\xiaxy\\automation_test2022.4.22\\common\\common_fun.py\", line 275, in get_clickable_element\n    self.error_save_screenshot(desc)\n  File \"D:\\xiaxy\\automation_test2022.4.22\\common\\common_fun.py\", line 258, in error_save_screenshot\n    raise e\n  File \"D:\\xiaxy\\automation_test2022.4.22\\common\\common_fun.py\", line 254, in error_save_screenshot\n    self.driver.save_screenshot(file_path)\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1055, in save_screenshot\n    return self.get_screenshot_as_file(filename)\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1032, in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1064, in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1074, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 31, in check_response\n    raise wde\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"D:\\xiaxy\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  }, {
    "name" : "driver_fixture::0",
    "time" : {
      "start" : 1652712732966,
      "stop" : 1652712732966,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('back_fixture')"
  }, {
    "name" : "parentSuite",
    "value" : "testCancelOrder"
  }, {
    "name" : "suite",
    "value" : "test_Qcancelorder"
  }, {
    "name" : "subSuite",
    "value" : "TestCancelOrder"
  }, {
    "name" : "host",
    "value" : "Win102021AVUCSJ"
  }, {
    "name" : "thread",
    "value" : "9516-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCancelOrder.test_Qcancelorder"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('back_fixture')" ]
  },
  "source" : "70512d55b61af21c.json",
  "parameterValues" : [ ]
}