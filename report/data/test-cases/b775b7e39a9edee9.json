{
  "uid" : "b775b7e39a9edee9",
  "name" : "test_setprice_dsj",
  "fullName" : "testEntrustSetup.test_Qentrust_setup.TestEntrustSetup#test_setprice_dsj",
  "historyId" : "04f1328e4f7b7c91f68011a569c028b7",
  "time" : {
    "start" : 1652795065512,
    "stop" : 1652795071431,
    "duration" : 5919
  },
  "status" : "broken",
  "statusMessage" : "AttributeError: module 'pytest' has no attribute 'assume'",
  "statusTrace" : "self = <testcases.testEntrustSetup.test_Qentrust_setup.TestEntrustSetup object at 0x007686F0>\nsetup_fixture = (<businessPage.trade_first_page.TradeFirst object at 0x00768550>, <businessPage.entrust_setup_page.Setup object at 0x0...<businessPage.choice_oder_page.ChoiceOrder object at 0x007685B0>, <businessPage.order_page.Order object at 0x00768370>)\n\n    @pytest.mark.usefixtures('back_fixture')\n    def test_setprice_dsj(self,setup_fixture):\n        tradehome, setup,choiceorder,order = setup_fixture\n        # 设置对手价并去下单页验证\n        setup.setprice_dsj()\n        setup.page_back()\n        tradehome.to_order()\n        choiceorder.c_orderpage()\n        el_price_text = order.el_text(order.price,\"对手价text\")\n>       pytest.assume(el_price_text == \"对手价\")\nE       AttributeError: module 'pytest' has no attribute 'assume'\n\ntestEntrustSetup\\test_Qentrust_setup.py:36: AttributeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver_fixture",
    "time" : {
      "start" : 1652794360868,
      "stop" : 1652794396581,
      "duration" : 35713
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "login_fixture",
    "time" : {
      "start" : 1652794396581,
      "stop" : 1652794501486,
      "duration" : 104905
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "setup_fixture",
    "time" : {
      "start" : 1652795062952,
      "stop" : 1652795065511,
      "duration" : 2559
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "back_fixture",
    "time" : {
      "start" : 1652795062952,
      "stop" : 1652795062952,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "AttributeError: module 'pytest' has no attribute 'assume'",
    "statusTrace" : "self = <testcases.testEntrustSetup.test_Qentrust_setup.TestEntrustSetup object at 0x007686F0>\nsetup_fixture = (<businessPage.trade_first_page.TradeFirst object at 0x00768550>, <businessPage.entrust_setup_page.Setup object at 0x0...<businessPage.choice_oder_page.ChoiceOrder object at 0x007685B0>, <businessPage.order_page.Order object at 0x00768370>)\n\n    @pytest.mark.usefixtures('back_fixture')\n    def test_setprice_dsj(self,setup_fixture):\n        tradehome, setup,choiceorder,order = setup_fixture\n        # 设置对手价并去下单页验证\n        setup.setprice_dsj()\n        setup.page_back()\n        tradehome.to_order()\n        choiceorder.c_orderpage()\n        el_price_text = order.el_text(order.price,\"对手价text\")\n>       pytest.assume(el_price_text == \"对手价\")\nE       AttributeError: module 'pytest' has no attribute 'assume'\n\ntestEntrustSetup\\test_Qentrust_setup.py:36: AttributeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b31e1ba6add80551",
      "name" : "log",
      "source" : "b31e1ba6add80551.txt",
      "type" : "text/plain",
      "size" : 766
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "driver_fixture::0",
    "time" : {
      "start" : 1652796124797,
      "stop" : 1652796124797,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "back_fixture::0",
    "time" : {
      "start" : 1652795071438,
      "stop" : 1652795071569,
      "duration" : 131
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('back_fixture')"
  }, {
    "name" : "parentSuite",
    "value" : "testEntrustSetup"
  }, {
    "name" : "suite",
    "value" : "test_Qentrust_setup"
  }, {
    "name" : "subSuite",
    "value" : "TestEntrustSetup"
  }, {
    "name" : "host",
    "value" : "Win102021AVUCSJ"
  }, {
    "name" : "thread",
    "value" : "10404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testEntrustSetup.test_Qentrust_setup"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "469fce86e96ec11a",
      "status" : "broken",
      "statusDetails" : "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x0400E0D0>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))",
      "time" : {
        "start" : 1652793916593,
        "stop" : 1652793916593,
        "duration" : 0
      }
    }, {
      "uid" : "182a4d5fd105c1e8",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details",
      "time" : {
        "start" : 1652713047023,
        "stop" : 1652713047023,
        "duration" : 0
      }
    }, {
      "uid" : "bc0f09d6ca5d533",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details",
      "time" : {
        "start" : 1652712703431,
        "stop" : 1652712703431,
        "duration" : 0
      }
    }, {
      "uid" : "141d6cdbb4500c53",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.TimeoutException: Message:",
      "time" : {
        "start" : 1652710822162,
        "stop" : 1652710822162,
        "duration" : 0
      }
    }, {
      "uid" : "31f033d7859925e2",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.TimeoutException: Message:",
      "time" : {
        "start" : 1652710342056,
        "stop" : 1652710342056,
        "duration" : 0
      }
    }, {
      "uid" : "f8c23cc5752b00cf",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not find a connected Android device in 20093ms.",
      "time" : {
        "start" : 1652710086123,
        "stop" : 1652710086123,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.usefixtures('back_fixture')" ]
  },
  "source" : "b775b7e39a9edee9.json",
  "parameterValues" : [ ]
}