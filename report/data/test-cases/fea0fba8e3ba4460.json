{
  "uid" : "fea0fba8e3ba4460",
  "name" : "test_change_exercise",
  "fullName" : "testExercise.test_Xexercise.TestClok#test_change_exercise",
  "historyId" : "5d51a18c85797881fc37ead95e10dbda",
  "time" : {
    "start" : 1652795248739,
    "stop" : 1652795284950,
    "duration" : 36211
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False == True\n  +False\n  -True",
  "statusTrace" : "self = <testcases.testExercise.test_Xexercise.TestClok object at 0x00D7A4B0>\nsetup_fixture = <businessPage.exercise_page.Exercise object at 0x00D7A110>\n\n    @pytest.mark.usefixtures('back_fixture')\n    def test_change_exercise(self,setup_fixture):\n        exe = setup_fixture\n        res = exe.change_exercise(1)\n>       assert res == True\nE       assert False == True\nE         +False\nE         -True\n\ntestExercise\\test_Xexercise.py:41: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver_fixture",
    "time" : {
      "start" : 1652794360868,
      "stop" : 1652794396581,
      "duration" : 35713
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "login_fixture",
    "time" : {
      "start" : 1652794396581,
      "stop" : 1652794501486,
      "duration" : 104905
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "setup_fixture",
    "time" : {
      "start" : 1652795246151,
      "stop" : 1652795248739,
      "duration" : 2588
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "back_fixture",
    "time" : {
      "start" : 1652795246151,
      "stop" : 1652795246151,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False == True\n  +False\n  -True",
    "statusTrace" : "self = <testcases.testExercise.test_Xexercise.TestClok object at 0x00D7A4B0>\nsetup_fixture = <businessPage.exercise_page.Exercise object at 0x00D7A110>\n\n    @pytest.mark.usefixtures('back_fixture')\n    def test_change_exercise(self,setup_fixture):\n        exe = setup_fixture\n        res = exe.change_exercise(1)\n>       assert res == True\nE       assert False == True\nE         +False\nE         -True\n\ntestExercise\\test_Xexercise.py:41: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "67284bb6ed573deb",
      "name" : "log",
      "source" : "67284bb6ed573deb.txt",
      "type" : "text/plain",
      "size" : 1730
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "driver_fixture::0",
    "time" : {
      "start" : 1652796124797,
      "stop" : 1652796124797,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "back_fixture::0",
    "time" : {
      "start" : 1652795284954,
      "stop" : 1652795285063,
      "duration" : 109
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('back_fixture')"
  }, {
    "name" : "parentSuite",
    "value" : "testExercise"
  }, {
    "name" : "suite",
    "value" : "test_Xexercise"
  }, {
    "name" : "subSuite",
    "value" : "TestClok"
  }, {
    "name" : "host",
    "value" : "Win102021AVUCSJ"
  }, {
    "name" : "thread",
    "value" : "10404-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testExercise.test_Xexercise"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "59d7c2d7b8005ca0",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details",
      "time" : {
        "start" : 1652713053018,
        "stop" : 1652713053018,
        "duration" : 0
      }
    }, {
      "uid" : "5b204e28a64dcb1f",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details",
      "time" : {
        "start" : 1652712709434,
        "stop" : 1652712709434,
        "duration" : 0
      }
    }, {
      "uid" : "90b5b9231659b6a5",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.TimeoutException: Message:",
      "time" : {
        "start" : 1652710822812,
        "stop" : 1652710822812,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.usefixtures('back_fixture')" ]
  },
  "source" : "fea0fba8e3ba4460.json",
  "parameterValues" : [ ]
}