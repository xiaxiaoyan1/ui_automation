{"name": "test_addSelf", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testcases.textContract.test_Qcontract.TestOrder object at 0x00DF97D0>\ndriver_fixture = <appium.webdriver.webdriver.WebDriver (session=\"0e7b83d5-90bd-4243-ba0f-6351e0c81c1e\")>\n\n    @pytest.fixture(scope='function', autouse=False)\n    def setup_fixture(self, driver_fixture):\n        driver = driver_fixture\n        tradehome = TradeFirst(driver)\n        first = First(driver)\n        screen = Screen(driver)\n        contract = Contract(driver)\n        order = Order(driver)\n        optional = Optional(driver)\n>       tradehome.to_first_page()\n\ntextContract\\test_Qcontract.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\businessPage\\trade_first_page.py:34: in to_first_page\n    self.get_clickable_element(self.first_page,\"首页\")\n..\\common\\common_fun.py:276: in get_clickable_element\n    raise e\n..\\common\\common_fun.py:270: in get_clickable_element\n    ele = WebDriverWait(self.driver,timeout,0.5).until(EC.element_to_be_clickable(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0e7b83d5-90bd-4243-ba0f-6351e0c81c1e\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x00DF9B90>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "attachments": [{"name": "log", "source": "7a8bf4b7-a5f8-4783-8589-8c340c46e9df-attachment.txt", "type": "text/plain"}], "start": 1652796101872, "stop": 1652796101872, "uuid": "f253bd4e-d3cf-4630-9461-141e6b85e369", "historyId": "29a6df8696eb717fbbb9aaa915cdea2a", "testCaseId": "5a6f3d45e8d551d827c04d037c6942d0", "fullName": "textContract.test_Qcontract.TestOrder#test_addSelf", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('back_fixture')"}, {"name": "parentSuite", "value": "textContract"}, {"name": "suite", "value": "test_Qcontract"}, {"name": "subSuite", "value": "TestOrder"}, {"name": "host", "value": "Win102021AVUCSJ"}, {"name": "thread", "value": "10404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "textContract.test_Qcontract"}]}