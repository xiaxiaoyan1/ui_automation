{"name": "test_cancel_flat", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <testcases.testCancelOrder.test_Qcancelorder.TestCancelOrder object at 0x001E9530>\nsetup_fixture = (<businessPage.cancel_order_page.CancelOrder object at 0x001E9F70>, <businessPage.trade_first_page.TradeFirst object a...<businessPage.choice_oder_page.ChoiceOrder object at 0x001E93B0>, <businessPage.order_page.Order object at 0x001E9AB0>)\n\n    @pytest.mark.usefixtures('back_fixture')\n    def test_cancel_flat(self,setup_fixture):\n        cancleorder,tradehome,choiceorder,order= setup_fixture\n        # 构造1个平仓撤单数据\n        tradehome.to_trade_page()\n        tradehome.to_order()\n        choiceorder.c_orderpage()\n        # 点击持仓item，返回权力仓或义务仓\n        type = order.get_hold_type()\n>       count = order.get_hold_count()\n\ntestCancelOrder\\test_Qcancelorder.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\businessPage\\order_page.py:543: in get_hold_count\n    return int(self.get_element_text(self.hold_count,\"可用数量\"))\n..\\common\\common_fun.py:160: in get_element_text\n    raise e\n..\\common\\common_fun.py:155: in get_element_text\n    ele = WebDriverWait(self.driver, timeout, 0.5).until(EC.visibility_of_element_located(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0e7b83d5-90bd-4243-ba0f-6351e0c81c1e\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x001E9650>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "attachments": [{"name": "log", "source": "7a9b8bf9-00fe-4616-a385-29aa36547da8-attachment.txt", "type": "text/plain"}], "start": 1652794694269, "stop": 1652794723508, "uuid": "34e49d47-a974-4567-816d-db8e6bc20e99", "historyId": "cfec313189808b66275e679df792eb72", "testCaseId": "cbab13a6eb818c06c0ecde76084450dd", "fullName": "testCancelOrder.test_Qcancelorder.TestCancelOrder#test_cancel_flat", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('back_fixture')"}, {"name": "parentSuite", "value": "testCancelOrder"}, {"name": "suite", "value": "test_Qcancelorder"}, {"name": "subSuite", "value": "TestCancelOrder"}, {"name": "host", "value": "Win102021AVUCSJ"}, {"name": "thread", "value": "10404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCancelOrder.test_Qcancelorder"}]}