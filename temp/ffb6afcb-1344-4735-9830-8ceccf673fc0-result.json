{"name": "test_all_cancel", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <businessPage.cancel_order_page.CancelOrder object at 0x001D0DF0>\n\n    def c_all_cancel(self):\n        try:\n>           self.get_visible_element(self.item,\"可撤的单\")\n\n..\\businessPage\\cancel_order_page.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <businessPage.cancel_order_page.CancelOrder object at 0x001D0DF0>\nloc = ('xpath', \"//android.widget.ListView[@resource-id='com.ztsinhouse.optionsimulate:id/lv_query']/android.widget.LinearLayout[1]\")\ndesc = '可撤的单', timeout = 10\n\n    def get_visible_element(self,loc,desc =None,timeout=10):\n        '''获取等待元素可见\n        判断元素是否可见（可见代表元素非隐藏，并且元素宽和高都不等于 0）visibility_of_element_located\n        如果没有找到元素，则执行之后的代码，直接跳过用例\n        param loc :元素定位器\n        param desc ：元素的描述'''\n        try:\n            ele=WebDriverWait(self.driver,timeout,0.5).until(EC.visibility_of_element_located(loc))\n        except Exception as e:\n            my_log.error(\"等待元素可见{}失败\".format(desc))\n            my_log.exception(e)\n            self.error_save_screenshot(desc)\n>           raise e\n\n..\\common\\common_fun.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <businessPage.cancel_order_page.CancelOrder object at 0x001D0DF0>\nloc = ('xpath', \"//android.widget.ListView[@resource-id='com.ztsinhouse.optionsimulate:id/lv_query']/android.widget.LinearLayout[1]\")\ndesc = '可撤的单', timeout = 10\n\n    def get_visible_element(self,loc,desc =None,timeout=10):\n        '''获取等待元素可见\n        判断元素是否可见（可见代表元素非隐藏，并且元素宽和高都不等于 0）visibility_of_element_located\n        如果没有找到元素，则执行之后的代码，直接跳过用例\n        param loc :元素定位器\n        param desc ：元素的描述'''\n        try:\n>           ele=WebDriverWait(self.driver,timeout,0.5).until(EC.visibility_of_element_located(loc))\n\n..\\common\\common_fun.py:207: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0e7b83d5-90bd-4243-ba0f-6351e0c81c1e\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x001D05F0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.testCancelOrder.test_Qcancelorder.TestCancelOrder object at 0x03DDECB0>\nsetup_fixture = (<businessPage.cancel_order_page.CancelOrder object at 0x001D0DF0>, <businessPage.trade_first_page.TradeFirst object a...<businessPage.choice_oder_page.ChoiceOrder object at 0x001D0DB0>, <businessPage.order_page.Order object at 0x001D05D0>)\n\n    @pytest.mark.usefixtures('back_fixture')\n    def test_all_cancel(self, setup_fixture):\n        cancleorder,tradehome,choiceorder,order= setup_fixture\n        # 构造1个撤单数据\n        tradehome.to_trade_page()\n        tradehome.to_order()\n        choiceorder.c_orderpage()\n        order.c_price_ztj()\n        order.c_hand(1)\n        order.c_ordersell()\n        order.order_page_back()\n        # 进入撤单页\n        tradehome.to_cancelOrder()\n>       res = cancleorder.c_all_cancel()\n\ntestCancelOrder\\test_Qcancelorder.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\businessPage\\cancel_order_page.py:32: in c_all_cancel\n    self.toastok()\n..\\common\\common_fun.py:389: in toastok\n    raise e\n..\\common\\common_fun.py:384: in toastok\n    self.get_clickable_element(self.toast_ok, \"toast确认按钮\")\n..\\common\\common_fun.py:276: in get_clickable_element\n    raise e\n..\\common\\common_fun.py:270: in get_clickable_element\n    ele = WebDriverWait(self.driver,timeout,0.5).until(EC.element_to_be_clickable(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0e7b83d5-90bd-4243-ba0f-6351e0c81c1e\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x001D08F0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "attachments": [{"name": "log", "source": "a58ac393-2edc-47cb-b172-112eb394ec68-attachment.txt", "type": "text/plain"}], "start": 1652794576074, "stop": 1652794623988, "uuid": "d242a958-6702-43fa-9176-11abc0353de1", "historyId": "30e84db457748a4c5279c6b1eb85feaa", "testCaseId": "9f05875202e3956f57ad585c5386e84b", "fullName": "testCancelOrder.test_Qcancelorder.TestCancelOrder#test_all_cancel", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('back_fixture')"}, {"name": "parentSuite", "value": "testCancelOrder"}, {"name": "suite", "value": "test_Qcancelorder"}, {"name": "subSuite", "value": "TestCancelOrder"}, {"name": "host", "value": "Win102021AVUCSJ"}, {"name": "thread", "value": "10404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCancelOrder.test_Qcancelorder"}]}